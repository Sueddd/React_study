1)  함수형 컴포넌트에서 useRef를 부르면 ref object를 반환해준다.
    우리가 인자로 넣어준 초기값은 ref 안의 current에 저장된다. 
    const ref = useRef(value)

    ref object 
    => { current : value}

2)  ref object는 수정이 가능하기 때문에 언제나 원하는 대로 변경 가능 
    => {current : "hi"}  => const ref = useRef("hi");
       {current : "hello"}  => ref.current = "hello";
       {current : "nice"}  => ref.current = "nice";

3)  반환된 ref는 컴포넌트의 전 생애주기를 통해 유지가 된다. 
    컴포넌트가 계속해서 랜더링 되어도 컴포넌트가
    unmount 되기 전까지는 값을 그대로 유지할 수 있다는 뜻

4)  useRef는 언제 사용이 될까? 
    (1) 저장공간 
        - state와 비슷하게 어떠한 값을 저장해두는 저장공간으로 사용

        ※ State의 변화 -> 렌더링 -> 컴포넌트 내부 변수들 초기화 
            - 함수형 컴포넌트는 말그대로 함수이다. 
            - 그래서 리랜더링이 되면 함수가 다시 불려지는 것이기 때문에 
            - 내부에 있는 모든 변수들이 전부 다시 초기화 된다. 
            - 가끔 원하지 않는 랜더링 때문에 곤란할 때가 있다. 
            - 그렇다면 state 대신 ref 안에 값을 저장하면 어떤 장점이 있을까?

            ▲ Ref의 변화 -> No 렌더링 -> 변수들의 값이 유지됨 
                - ref안의 값을 아무리 변경해도 컴포넌트는 다시 랜더링 되지 않는다.
                - 불필요한 렌더링을 막을 수 있다. 
                - 컴포넌트가 아무리 랜더링이 되어도 ref안의 저장된 값은 변하지 않고 유지된다. 

    (2) DOM 요소에 접근
        - ref를 통해 실제적으로 DOM 요소에 접근하지 않아도 많은 일을 할 수 있다. 
            ex) input 요소를 클릭하지 않아도 포커스를 주고 싶을 때
        
        
5) DOM 요소에 접근하는 useRef

    const ref = useRef(value)
    => {current : value} 로 반환 
        => 반환한 object를 접근하고자 하는 요소 태그에
           ref 속성으로 넣어주기만 하면 쉽게 해당요소에 접근이 가능하다
           -> <inpu ref = {ref} />
    
    ex) input 요소에 포커스를 줄 때 많이 사용
        로그인 페이지에서 아이디를 넣는 공간을 굳이 클릭하지 않아도 자동 포커스

    